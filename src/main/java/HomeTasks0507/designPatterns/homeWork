Singleton -->

Zaimplementować klasę Logger która:
- Będzie singletonem
- Powinna zawierać metodę log, która jako argument przyjmuje test (String) oraz zapisuje go do pliku.
- Sciezna do pliku powinna byc stała z góry ustalona
=================================================================
Strategia --> Zamówinie, Kalkulator podatku


Napisać klasę Produkt z polami: nazwa, cena + getery, setery i konstruktor.
Napisać klase Zamowienie która ma: numer zamówienia, adres zamowienia, "Listę prduktów"
oraz KalkulatorPodatku, który będzie strategią naszego obiektu zamówienia. Ponadto klasa zamówienie powinna miec 2 metody obliczCeneZamowienia i obliczPodatek
Do oblicznia podatku powinna zostać uzyta klasa (strategia) "KalkulatorPodatku".

Interfej KalkulatorPodatku powinien mieć jedną metodę opliczPodatek przyjmującą listę produktów.
Stworzyć 2-3 implementacje interfejsu KalkulatorPodatku np. KalkulatorPodatkuPolska, KalkulatorPodatkuUE, KalkulatorPodatkuUSA




=================================================================
Adapter ---> Shape(draw, getObwod), Circle(print, calculateObwod)
Napisać Interfej Shape (kształt) z metodami drow(rysuj)
uj), getCircumference (obwód). Zrobić 2 implementacje tego interfejsu (Square, Triangle)

Napisać klasę ShapreManager która ma listę Shape-ów. Napisać metodę która dodaje do tej listy kolejny Shape, oraz metodę drawAllShapers
i printAllCircumference

Nastpemnie NapisacKlase Circle(NIE impelemtujaca Shape), która  ma metody print (rysuj) oraz calculateCircumference

Napisz Adatper do klasy Circle tak aby spełniała interfej Shape.

Jaby przetestować działanie w metodzie main stwórz Shapermanager dodaj do niego kwadrat, trójkąt oraz adapter klasy Circle( oczywiście najpierw stworzyć samo Circle)

========================================================================================
Obserwer ---> Button (SmsSender, EmailSender)

Stworzyć dwa Intervfejsy pierwszy "Observable" będzie reprezentował obiekt są jest nasłuchiwany/obserwowany z metodami:
addLisneter(Listener observer)  ---> metoda rejestruąca obserwatora/nasłuchiwacza
removeListener(Listener listener)  ----> metoda usuwająca obserwatora/nasłuchującego
notifyListeners() ---> metoda która w momencie zajścia jakiegoś zdarzenia  aktualizuje wszystkich naśluchujących.

Drugi interfejs (już użyty w powyższych sygnaturach metod) tj. "Listener" reprezentuje obiekt nasłuchujący/obserwujący,
powinien on posiadać jedną metodę - update(), która jest wykonywana w kiedy zachodzi jakieś zdarzenie w obiekcie nasłuchiwanym.

Zaimplementować powyższe interfejsy w następujący sposób:
Niech obiektem nasłuchiwanym (spełniającym interfejs Observable) będzie Przycisk (Button). W przyciwsku oprócz implementacji interfesu dodać metodę, która będzie
udawać kliknięcie np. click(). Metoda click powinna spowodować powiadomonie wszystkich nasłuchujących (wywołać notifiyListeners).

Następnie zaimplementować 2-3 obiekty nasłuchujące przycisk np. EmailSender, SmsSender, każdy w swojej metodzie update powinien
symulować jakieś działanie np. wysłanie maila, wysłanie smsa (nie na znaczenia jak może być równie dobrze sout "Wysyłam smsa".

Na koniec spinamy nasze klasy.
W mainie tworzymy button i dodajemy do niego 2-3 obserwatorów (addListener) następnie wywołujemy symulację kliknięcia tj. button.click()

Podpowiedź: poszukać jak obiekt obserwowany zwykle przechowuje obiekty nasłuchujące. Jeśli nie znajdziecie zapytać trenera :)

=========================================================================================

Fasada:

Dane mamy systemy: SystemHotelowy, SystemLotow, SystemTaxi, WystemWynajmuAut.
każdy system posiada interfejs w skład które wchodzi metoda do rezerwacji wykonująca
rezerwację w danym systemie i zwracająca obiekt potwierdzenia (Potwierdzenie)
Napisać fasadę SystemBiurPodrozy z metodą zarezerwujWycieczke. Fasada powinna wykonać metody poszczególnych
systemów tak aby uzyskać (w podanej kolejności) następujące potwierdzenia z systemów.

potwierdzenieLotuDocelowego
potwierdzenieTaxiZLotniska
potwierdzenieHotelu
potwierdzenieTaxiNaLotnisko
potwierdzenieLotuPowrotnego

jeśli zrealizowanie wszystkich zleceń przebiegnie prawidłowo metoda zarezerwujWycieczke powinna
również zwrócić potwierdzenie wycieczki.

metoda zarezerwuj wycieczkę powinna pobierać następujące parametry:

- String miastoDocelowe,
- LocalDate dataPoczątkuWycieczki,
- int dlugoscWycieczki

=======================================================================================
Fluent Builder

Dana jest klasa;

public class Lekarz () {

	public enum Zmiana {PORANNA, POPOŁUDNIOWA, NOCNA};

	private String imie;
	private String nazwisko;

	private String pesel;
	private String specjalizacja;
	private Zmiana zmiana;
	private int wynagrodzenie;

	//konstuktory
	//getery setery
}


Zaimplementować w klasie Lekarz Fluent (Inner fluent) Builder. Zakładamy, że pola imię
oraz nazwisko są wymagane, reszta opcjonalna.
